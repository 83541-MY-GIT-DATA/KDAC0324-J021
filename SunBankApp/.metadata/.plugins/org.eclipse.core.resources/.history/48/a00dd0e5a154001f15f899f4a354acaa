package com.sunBank.services;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Component;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import com.sunBank.entities.AccountOperation;
import com.sunBank.entities.BankAccount;
import com.sunBank.entities.Customer;
import com.sunBank.repositories.AccountOperationRepository;
import com.sunBank.repositories.BankAccountRepository;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Component
@AllArgsConstructor
@Slf4j
public class BankStatement {

	private AccountOperationRepository accountOperationRepository;
	private BankAccountRepository bankAccountRepository;
	private EmailService emailService;
	
	private static final String FILE="E:\\PG-DAC\\Statemnt.pdf";
	
	
	public List<AccountOperation> generateStatement(String accountNumber) throws ParseException,FileNotFoundException, DocumentException
	{
		List<AccountOperation> operationList = new ArrayList<AccountOperation>();
		
		try
		{
			accountOperationRepository.findAll().stream()
									.forEach(operation ->{
										if(operation.getBankAccount().getId().equals(accountNumber))
											operationList.add(operation);
									});
		}catch (Exception e) {
			throw new RuntimeException(e);
		}
		
		Customer customer = bankAccountRepository.findById(accountNumber).orElseThrow().getCustomer();
		BankAccount bankAccount = bankAccountRepository.findById(accountNumber).orElseThrow();
		String customerName = customer.getName();
		Rectangle statementSize = new Rectangle(PageSize.A4);
		Document document = new Document(statementSize);
		log.info("Setting size of document");
		
		OutputStream outputStream = new FileOutputStream(FILE);
		PdfWriter.getInstance(document, outputStream);
		document.open();
		
		PdfPTable bankInfoTable = new PdfPTable(1);
		PdfPCell bankName = new PdfPCell(new Phrase("SUNBANK"));
		bankName.setBorder(0);
		bankName.setBackgroundColor(BaseColor.BLUE);
		bankName.setPadding(20f);
		
		PdfPCell bankAddress = new PdfPCell(new Phrase("Sunbeam,Karad-413511\n\n"));
		bankAddress.setBorder(0);
		bankInfoTable.addCell(bankName);
		bankInfoTable.addCell(bankAddress);
		
		PdfPTable statementInfo = new PdfPTable(3);
		PdfPCell name = new PdfPCell(new Phrase("Customer Name: "+customerName));
		name.setBorder(0);
		PdfPCell space = new PdfPCell();
		PdfPCell account = new PdfPCell(new Phrase("Account Number: "+accountNumber));
		account.setBorder(0);
		PdfPCell balance = new PdfPCell(new Phrase("Current Balance: "+bankAccount.getBalance()));
		balance.setBorder(0);
		
		statementInfo.addCell(name);
		statementInfo.addCell(account);
		statementInfo.addCell(balance);
		
		PdfPTable heading = new PdfPTable(1);
		PdfPCell statement = new PdfPCell(new Phrase("Statement of Account"));
		statement.setBorder(0);
		heading.addCell(statement);
		
		//this will create a table of 4 columns 
		PdfPTable transactionTable = new PdfPTable(4);
		PdfPCell transactionId = new PdfPCell(new Phrase("Transaction Id"));
		transactionId.setBackgroundColor(BaseColor.BLACK);
		transactionId.setBorder(0);
		
		PdfPCell date = new PdfPCell(new Phrase("Date"));
		date.setBackgroundColor(BaseColor.BLACK);
		date.setBorder(0);
		
		PdfPCell transactionType = new PdfPCell(new Phrase("Transaction Type"));
		transactionType.setBackgroundColor(BaseColor.BLACK);
		transactionType.setBorder(0);
		
		PdfPCell transactionAmount = new PdfPCell(new Phrase("Transaction Amount"));
		transactionAmount.setBackgroundColor(BaseColor.BLACK);
		transactionAmount.setBorder(0);
		
		transactionTable.addCell(transactionId);
		transactionTable.addCell(date);
		transactionTable.addCell(transactionType);
		transactionTable.addCell(transactionAmount);
		
		operationList.forEach(operation -> {
			transactionTable.addCell(new Phrase(operation.getId().toString()));
			transactionTable.addCell(new Phrase(operation.getOperationDate().toString()));
			transactionTable.addCell(new Phrase(operation.getOperationType().toString()));
			transactionTable.addCell(new Phrase(String.valueOf(operation.getAmount())));
		});
		
		document.add(bankInfoTable);
		document.add(statementInfo);
		document.add(heading);
		document.add(transactionTable);
	}
}
